import random

class Scrambler:
    # Length of the scramble
    scrambleLength = 25

    def fixScramble(self, scramble, faces):
        """
        Fixes the scramble generated by generateScramble() function by eliminating consecutive 
        occurence of the same faces
        @param scramble - list containing the scramble generated by generateScramble() function
        @param faces - tuple containing all 6 faces of the cube (F, R, U, L, B, D)
        
        @return scramble - tuple of the modified scramble
        """
     
        prev = scramble[0]
        for i in range(1, len(scramble), 1):
            cur = scramble[i]
            while cur[0] == prev[0]:
                if len(cur) < 2:
                    scramble[i] = faces[random.randint(0, len(faces) - 1)]
                else:
                    scramble[i] = faces[random.randint(0, len(faces) - 1)] + cur[1]
                cur = scramble[i]
            prev = cur
        
        opp = {'F': 'B', 'R': 'L', 'U': 'D', 
            'B': 'F', 'L': 'R', 'D': 'U'}
        for i in range(1, len(scramble), 1):
            if i == len(scramble) - 1:
                break
            prev = scramble[i - 1]
            cur = scramble[i]
            fut = scramble[i + 1]
            while prev[0] == opp[cur[0]] and prev[0] == fut[0]:
                scramble[i+1] = faces[random.randint(0, len(faces) - 1)] + fut[1]
                fut = scramble[i + 1]
        return tuple(scramble)

    def generateScramble(self, faces, turns):
        """
        Generates a random scramble of 20 turns.
        @param faces - tuple containing all 6 faces of the cube (F, R, U, L, B, D)
        @param turns - tuple containing all types of turns possible on a cube (F, F2, F')

        @return scramble - list of the genearated scramble
        """

        scramble = list()
        for i in range(0, self.scrambleLength, 1):
            tmp = random.randint(0, len(turns) - 1)
            if tmp == 0:
                scramble.append(faces[random.randint(0, len(faces) - 1)] + "")
            elif tmp == 1:
                scramble.append(str(faces[random.randint(0, len(faces) - 1)]) + "2")
            else:
                scramble.append(str(faces[random.randint(0, len(faces) - 1)]) + "'")
        return self.fixScramble(scramble, faces)

    def Scrambler(self, scramble, cube):
        """
        Scramble the cube and reflect results in the cube list
        @param scramble - tuple containing the scramble
        @param cube - object of type Cube
        """

        for x in scramble:
            face = x[0]
            if len(x) < 2:
                direction = None
            else:
                direction = x[1]
            turn = 0
            if direction == "'":
                turn = 3
            elif direction == "2":
                turn = 2
            else:
                turn = 1
            cube.rotate(face, turn)

    def showScramble(self, scramble):
        """
        prints the scramble in a manner that is easy to read
        """

        for i in scramble:
            print(i, end=" ")

